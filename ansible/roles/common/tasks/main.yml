- name: Install required packages
  ansible.builtin.apt:
    pkg:
      - openjdk-17-jdk
      - git
      - python3-pip
      - zip
      - collectd
    update_cache: yes
  become: true

- name: Install boto3 Python package
  ansible.builtin.pip:
    name: boto3

- amazon.aws.ec2_metadata_facts:

- name: Retrieve all tags on an instance
  amazon.aws.ec2_tag_info:
    resource: "{{ ansible_ec2_instance_id }}"
    region: us-west-2
  register: instance_tags

- name: Create server and scripts directories if they do not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /home/ubuntu/server/
    - /home/ubuntu/scripts/

- name: Write eula
  copy:
    dest: "/home/ubuntu/server/eula.txt"
    content: "eula=true"

- name: Copy scripts
  copy:
    src: '../files/scripts'
    dest: '/home/ubuntu/'
  become: true

- name: Download mcrcon
  amazon.aws.aws_s3:
    bucket: "{{ s3_files_bucket }}"
    object: rcon/mcrcon-0.7.2-linux-x86-64.tar.gz
    dest: /tmp/mcrcon-0.7.2-linux-x86-64.tar.gz
    mode: get

- name: Make scripts executable
  file:
    path: /home/ubuntu/scripts
    owner: ubuntu
    group: ubuntu
    mode: '0775'
    state: directory
    recurse: yes

- name: Extract mcrcon
  ansible.builtin.unarchive:
    src: /tmp/mcrcon-0.7.2-linux-x86-64.tar.gz
    dest: /usr/local/bin/
    remote_src: true
  become: true

- name: Conditional Pull and Extract World Save
  block:
    - name: Check if /home/ubuntu/server/world directory exists
      ansible.builtin.stat:
        path: "/home/ubuntu/server/world"
      register: world_directory_status

    - name: Pull and Extract world if /home/ubuntu/server/world does not exist
      ansible.builtin.block:
        block:
          - name: Pull world
            ansible.builtin.shell: "aws s3 cp s3://{{ s3_world_bucket }}/worlds/mc.{{ instance_tags['tags']['Name'] }}.zip /tmp/"

          - name: Extract world
            ansible.builtin.unarchive:
              src: "/tmp/mc.{{ instance_tags['tags']['Name'] }}.zip"
              dest: "/home/ubuntu/server"
              remote_src: yes
        rescue:
          - name: Failed to pull or extract existing world save
            ansible.builtin.debug:
              msg: 'Failed to pull or extract the existing world save. Does it exist?'
      when: not world_directory_status.stat.exists
  become: true

- name: Setup auto shutdown cron job
  ansible.builtin.cron:
    name: "auto shutdown"
    minute: "*/15"
    weekday: "*"
    hour: "*"
    job: "/bin/bash /home/ubuntu/scripts/stop-check.sh >> /home/ubuntu/cron.log 2>&1"

- name: Setup auto backup
  ansible.builtin.cron:
    name: "World backup"
    minute: "*/30"
    weekday: "*"
    hour: "*"
    job: "/bin/bash /home/ubuntu/scripts/backup-world.sh >> /home/ubuntu/cron.log 2>&1"

- name: Setup dns cron job
  ansible.builtin.cron:
    name: "Setup DDNS for mc.rusecrew.com"
    minute: "*/1"
    weekday: "*"
    hour: "*"
    job: "/bin/bash /home/ubuntu/scripts/update-dns.sh >> /home/ubuntu/cron.log 2>&1"

- name: Download cloudwatch agent
  ansible.builtin.get_url:
    url: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
    dest: /tmp/amazon-cloudwatch-agent.deb

- name: Install cloudwatch agent
  ansible.builtin.shell: dpkg -i -E /tmp/amazon-cloudwatch-agent.deb
  become: true

- name: Copy config file with owner and permission
  ansible.builtin.copy:
    src: ../files/config.json
    dest: /opt/aws/amazon-cloudwatch-agent/bin/config.json
  become: true

- name: Install cloudwatch agent
  ansible.builtin.shell: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
  become: true
