service: mcdiscordbot
variablesResolutionMode: 20210326

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: us-west-2
  iam:
    role:
      statements:

        - Effect: "Allow"
          Action:
            - "ec2:DescribeInstances"
            - "ec2:StartInstances"
            - "ec2:StopInstances"
            - "ce:*"
          Resource: 
            - "*"

        - Effect: "Allow"
          Action:
            - "sns:Publish"
          Resource: 
            - !Ref mcalerts

        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:Scan"
          Resource:
            - ${ssm:/mc/dynamodb-mc}
      
        - Effect: "Allow"
          Action:
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:CreateNetworkInterface"
            - "ec2:DeleteNetworkInterface"
            - "ec2:DescribeInstances"
            - "ec2:AttachNetworkInterface"
          Resource:
            - "*"

plugins:
  - serverless-python-requirements
  - serverless-add-api-key
custom:
  apiKeys:
    - name: discordBot
  pythonRequirements:
   pythonBin: python3

package:
  individually: True
  exclude:
    # Exclude everything first.
    - '**/*'
  include:
    - 'functions/shared/*'

functions:

  # Main function for taking start and stop actions.
  ec2Action:
    handler: functions/action/action.handler
    events:
      - http:
          path: action
          method: post
          private: True
    package:
      include:
        - functions/action/**
    environment:
      region: us-west-2
      rconpass: ${ssm:/mc/rconpass}
  # Function for using mcstatus to check if a mc server is running 
  getStatus:
    handler: functions/status/status.handler
    events:
      - http:
          path: status
          method: get
          # private: True
    package:
      include:
        - functions/status/**

  # Function for listing EC2 minecraft servers based on tags
  listServers:
    handler: functions/list/list.handler
    events:
      - http:
          path: list
          method: get
          private: True
    package:
      include:
        - functions/list/**

  # Function for SNS to send message to discord
  # Triggered by SNS
  sendDiscordMessage:          
    handler: functions/sendDiscordMessage/send.handler
    events:
      - sns:
          arn: !Ref mcalerts
          topicName: mcalerts
    package:
      include:
        - functions/sendDiscordMessage/**
    environment:
      webhook: ${ssm:/mc/discord-webhook}

  # Function to check account total per month.
  # Triggered by cloudwatch

  billingNotification:          
    handler: functions/billingNotifiy/notify.handler
    events:
      - schedule: rate(15 days)
    package:
      include:
        - functions/billingNotifiy/**
  
  # Allow users to read player billing 
  listPlayerBillinging:          
    handler: functions/listPlayerBilling/listPlayerBilling.handler
    events:
      - http:
          path: 
          method: get
          private: True
    package:
      include:
        - functions/listPlayerBillinging/**
  
  managePlayerBilling:          
    handler: functions/managePlayerBilling/managePlayerBilling.handler
    events:
      - schedule: rate(1 min)
    environment:
      rconpass: ${ssm:/mc/rconpass}
    package:
      include:
        - functions/managePlayerBilling/**

  mcCommand:          
    handler: functions/mccommand/command.handler
    events:
      - http:
          path: cmd
          method: post
          private: True
    environment:
      rconpass: ${ssm:/mc/rconpass}
    package:
      include:
        - functions/mccommand/**

resources:
  Resources:
    mcalerts:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: mcalerts       